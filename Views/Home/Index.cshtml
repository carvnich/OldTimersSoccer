@model List<OldTimersSoccer.Models.Standing>
@{
    var divisions = Model.Select(s => s.DivisionId).Distinct().OrderBy(d => d).ToList();
    var currentDivision = ViewBag.Division as string ?? divisions.FirstOrDefault();
    var displayDivision = currentDivision?.Replace(" DIVISION", "");
    var leagues = new[] { "Regular Season", "Spence Cup", "Playoffs" };
    var currentLeague = ViewBag.League as string ?? "Regular Season";
}
<div class="position-relative overflow-hidden" style="height: 35vh; background-image: url('/images/hero4.png'); background-size: cover; background-position: center;">
    <div class="position-absolute bottom-0 start-0 w-100 d-flex justify-content-between align-items-end p-4 text-white">
        <h1 class="display-2">Old Timers Soccer League</h1>
        <div class="text-end fs-5">
            <p class="m-0">Hamilton Italian Centre</p>
            <p class="m-0">420 Crerar Dr</p>
            <p class="m-0">Hamilton, ON L9A 5K3</p>
            <p class="m-0">hdotsl@gmail.com</p>
        </div>
    </div>
</div>
<div class="container-fluid px-4">
    <div class="py-3">
        <div class="btn-group w-100 mb-3" role="group">
            @foreach (var league in leagues)
            {
                <input type="radio" class="btn-check" name="league" id="@league.Replace(" ", "")" value="@league" @(league == currentLeague ? "checked" : "") onchange="filterLeague('@league')">
                <label class="btn btn-outline-primary" for="@league.Replace(" ", "")">@league</label>
            }
        </div>
        <div class="d-flex justify-content-between overflow-auto" style="gap: 0.5rem;">
            @foreach (var division in divisions)
            {
                var imageName = division.Replace(" DIVISION", "").ToLower();
                <input type="radio" class="btn-check" name="division" id="@division" value="@division" @(division == currentDivision ? "checked" : "") onchange="filterDivision('@division')">
                <label class="btn btn-primary flex-fill mx-1" for="@division"><img src="~/images/div@(imageName).png" alt="@division" style="height: 100px;"></label>
            }
        </div>
    </div>
    <div class="py-3">
        <div class="text-center mb-3">
            <h2 id="leagueDisplay">@currentLeague</h2>
            <h3 id="divisionDisplay">Division @displayDivision</h3>
            <h5>2025</h5>
        </div>
    </div>
    <div class="pb-5">
        <div id="scheduleCarousel" class="mb-5"></div>
        <div class="d-flex justify-content-center mb-4">
            <div class="btn-group">
                <input type="radio" class="btn-check" name="view" id="viewStandings" checked onchange="toggleView('standings')">
                <label class="btn btn-outline-primary" for="viewStandings">Standings</label>
                <input type="radio" class="btn-check" name="view" id="viewScorers" onchange="toggleView('scorers')">
                <label class="btn btn-outline-primary" for="viewScorers">Top Scorers</label>
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <div id="standingsTable">@await Html.PartialAsync("_StandingsPartial", Model)</div>
            <div id="scorersTable" style="display: none;"></div>
        </div>
    </div>
</div>

<script>
    let currentDivision = '@currentDivision';
    let currentLeague = '@currentLeague';

    document.addEventListener('DOMContentLoaded', async function() {
        await loadSchedule(currentDivision, currentLeague);
        const response = await fetch(`/Home/Scorers?division=${encodeURIComponent(currentDivision)}&league=${encodeURIComponent(currentLeague)}`);
        document.getElementById('scorersTable').innerHTML = await response.text();
    });

    async function loadSchedule(division, league) {
        const response = await fetch(`/Home/Schedule?division=${encodeURIComponent(division)}&league=${encodeURIComponent(league)}`);
        const html = await response.text();
        document.getElementById('scheduleCarousel').innerHTML = html;
        if (typeof scheduleCarousel !== 'undefined') {
            scheduleCarousel.init();
        }
    }

    function filterLeague(league) {
        currentLeague = league;
        document.getElementById('leagueDisplay').textContent = league;
        loadSchedule(currentDivision, currentLeague);
        loadView(document.querySelector('input[name="view"]:checked').id.replace('view', '').toLowerCase(), currentDivision, currentLeague);
    }

    function filterDivision(division) {
        currentDivision = division;
        document.getElementById('divisionDisplay').textContent = 'Division ' + division.replace(' DIVISION', '');
        loadSchedule(currentDivision, currentLeague);
        loadView(document.querySelector('input[name="view"]:checked').id.replace('view', '').toLowerCase(), currentDivision, currentLeague);
    }

    async function toggleView(view) {
        await loadView(view, currentDivision, currentLeague);
    }

    async function loadView(view, division, league) {
        const standingsTable = document.getElementById('standingsTable');
        const scorersTable = document.getElementById('scorersTable');

        const url = view === 'standings'
            ? `/Home/Standings?division=${encodeURIComponent(division)}&league=${encodeURIComponent(league)}`
            : `/Home/Scorers?division=${encodeURIComponent(division)}&league=${encodeURIComponent(league)}`;

        const response = await fetch(url);
        const html = await response.text();

        if (view === 'standings') {
            standingsTable.innerHTML = html;
            standingsTable.style.display = 'block';
            scorersTable.style.display = 'none';
        } else {
            scorersTable.innerHTML = html;
            standingsTable.style.display = 'none';
            scorersTable.style.display = 'block';
        }
    }
</script>